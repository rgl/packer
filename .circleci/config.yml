orbs:
  win: circleci/windows@1.0.0
  codecov: codecov/codecov@1.0.5

version: 2.1

executors:
  golang:
    docker:
      - image: circleci/golang:1.13
  darwin:
    macos:
      xcode: "9.0"

commands:
  install-go-run-tests-unix:
    parameters:
      GOOS:
        type: string
      GOVERSION:
        type: string
    steps:
      - checkout
      - run: curl https://dl.google.com/go/go<< parameters.GOVERSION >>.<< parameters.GOOS >>-amd64.tar.gz | tar -C ~/ -xz
      - run: ~/go/bin/go test ./... -coverprofile=coverage.txt  -covermode=atomic
  install-go-windows:
    parameters:
      GOVERSION:
        type: string
    steps:
      - checkout
      - run: curl https://dl.google.com/go/go<< parameters.GOVERSION >>.windows-amd64.zip --output ~/go<< parameters.GOVERSION >>.windows-amd64.zip
      - run: unzip ~/go<< parameters.GOVERSION >>.windows-amd64.zip -d ~/
  install-go-run-tests-windows:
    parameters:
      GOVERSION:
        type: string
    steps:
      - install-go-windows:
          GOVERSION: << parameters.GOVERSION >>
      - run: ~/go/bin/go test ./... -coverprofile=coverage.txt  -covermode=atomic
  install-go-run-tests-windows-msys2:
    parameters:
      GOVERSION:
        type: string
    steps:
      - install-go-windows:
          GOVERSION: << parameters.GOVERSION >>
      - run:
          name: install msys2
          shell: powershell.exe
          command: |
            # install msys2.
            choco install --no-progress -y msys2
            # configure the msys2 launcher to let the shell inherith the PATH.
            $msys2BasePath = 'C:\tools\msys64'
            $msys2ConfigPath = "$msys2BasePath\msys2.ini"
            [IO.File]::WriteAllText(
                $msys2ConfigPath,
                ([IO.File]::ReadAllText($msys2ConfigPath) `
                    -replace '#?(MSYS2_PATH_TYPE=).+','$1inherit')
            )
            # define a function for easying the execution of bash scripts.
            $bashPath = "$msys2BasePath\usr\bin\bash.exe"
            function Bash($script) {
                $eap = $ErrorActionPreference
                $ErrorActionPreference = 'Continue'
                try {
                    # we also redirect the stderr to stdout because PowerShell
                    # oddly interleaves them.
                    # see https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin
                    echo 'exec 2>&1;set -eu;export PATH="/usr/bin:$PATH";export HOME=$USERPROFILE;' $script | &$bashPath
                    if ($LASTEXITCODE) {
                        throw "bash execution failed with exit code $LASTEXITCODE"
                    }
                } finally {
                    $ErrorActionPreference = $eap
                }
            }
            
            # install dependencies.
            Bash 'pacman --noconfirm -Sy xorriso'
      - run:
          name: run unit tests
          shell: powershell.exe
          command: |
            # define a function for easying the execution of bash scripts.
            $bashPath = "C:\tools\msys64\usr\bin\bash.exe"
            function Bash($script) {
                $eap = $ErrorActionPreference
                $ErrorActionPreference = 'Continue'
                try {
                    # we also redirect the stderr to stdout because PowerShell
                    # oddly interleaves them.
                    # see https://www.gnu.org/software/bash/manual/bash.html#The-Set-Builtin
                    echo 'exec 2>&1;set -eu;export PATH="/usr/bin:$PATH";export HOME=$USERPROFILE;' $script | &$bashPath
                    if ($LASTEXITCODE) {
                        throw "bash execution failed with exit code $LASTEXITCODE"
                    }
                } finally {
                    $ErrorActionPreference = $eap
                }
            }
            
            Bash @'
            set -euxo pipefail
            ~/go/bin/go test ./... -coverprofile=coverage.txt -covermode=atomic
            '@
  build-and-persist-packer-binary:
    parameters:
      GOOS:
        type: string
    steps:
      - checkout
      - run: GOOS=<< parameters.GOOS >> go build -ldflags="-s -w -X github.com/hashicorp/packer/version.GitCommit=${CIRCLE_SHA1}" -o ./pkg/packer_<< parameters.GOOS >>_$(go env GOARCH) .
      - run: zip ./pkg/packer_<< parameters.GOOS >>_$(go env GOARCH).zip ./pkg/packer_<< parameters.GOOS >>_$(go env GOARCH)
      - run: rm ./pkg/packer_<< parameters.GOOS >>_$(go env GOARCH)
      - persist_to_workspace:
          root: .
          paths:
            - ./pkg/
# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
jobs:
  test-linux:
    executor: golang
    resource_class: large
    working_directory: /go/src/github.com/hashicorp/packer
    steps:
      - checkout
      - run: TESTARGS="-coverprofile=coverage.txt  -covermode=atomic" make ci
      - codecov/upload:
          file: coverage.txt
  test-darwin:
    executor: darwin
    working_directory: ~/go/src/github.com/hashicorp/packer
    environment:
      GO111MODULE: "off"
    steps:
      - install-go-run-tests-unix:
          GOOS: darwin
          GOVERSION: "1.13"
      - codecov/upload:
          file: coverage.txt
  test-windows:
    executor:
      name: win/vs2019
      shell: bash.exe
    steps:
      - install-go-run-tests-windows:
          GOVERSION: "1.13"
      - codecov/upload:
          file: coverage.txt
  test-windows-msys2:
    executor:
      name: win/vs2019
      shell: bash.exe
    steps:
      - install-go-run-tests-windows-msys2:
          GOVERSION: "1.13"
      - codecov/upload:
          file: coverage.txt
  check-lint:
    executor: golang
    resource_class: xlarge
    steps:
      - checkout
      - run: git fetch --all
      - run:
          command: make ci-lint
          no_output_timeout: 30m
  check-vendor-vs-mod:
    executor: golang
    working_directory: /go/src/github.com/hashicorp/packer
    environment:
      GO111MODULE: "off"
    steps:
      - checkout
      - run: GO111MODULE=on go run . --help
      - run: make check-vendor-vs-mod
  check-fmt:
    executor: golang
    steps:
      - checkout
      - run: make fmt-check
  check-generate:
    executor: golang
    working_directory: /go/src/github.com/hashicorp/packer
    steps:
      - checkout
      - run: make generate-check
  build_linux:
    executor: golang
    steps:
      - build-and-persist-packer-binary:
          GOOS: linux
  build_windows:
    executor: golang
    working_directory: /go/src/github.com/hashicorp/packer
    steps:
      - build-and-persist-packer-binary:
          GOOS: windows
  build_darwin:
    executor: golang
    working_directory: /go/src/github.com/hashicorp/packer
    steps:
      - build-and-persist-packer-binary:
          GOOS: darwin
  build_freebsd:
    executor: golang
    working_directory: /go/src/github.com/hashicorp/packer
    steps:
      - build-and-persist-packer-binary:
          GOOS: freebsd
  build_solaris:
    executor: golang
    working_directory: /go/src/github.com/hashicorp/packer
    steps:
      - build-and-persist-packer-binary:
          GOOS: solaris
  build_openbsd:
    executor: golang
    working_directory: /go/src/github.com/hashicorp/packer
    steps:
      - build-and-persist-packer-binary:
          GOOS: openbsd
  store_artifacts:
    executor: golang
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
          path: ./pkg/
          destination: /
  build-website-docker-image:
    docker:
      - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image if Necessary
          command: |
            IMAGE_TAG=$(cat website/Dockerfile website/package-lock.json | sha256sum | awk '{print $1;}')
            echo "Using $IMAGE_TAG"
            if curl https://hub.docker.com/v2/repositories/hashicorp/packer-website/tags/$IMAGE_TAG -fsL > /dev/null; then
                echo "Dependencies have not changed, not building a new website docker image."
            else
                cd website/
                docker build -t hashicorp/packer-website:$IMAGE_TAG .
                docker tag hashicorp/packer-website:$IMAGE_TAG hashicorp/packer-website:latest
                docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
                docker push hashicorp/packer-website
            fi
  algolia-index:
    docker:
      - image: node:12
    steps:
      - checkout
      - run:
          name: Push content to Algolia Index
          command: |
            if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/packer.git" ]; then
              echo "Not Packer OSS Repo, not indexing Algolia"
              exit 0
            fi
            cd website/
            npm install
            node scripts/index_search_content.js

workflows:
  version: 2
  test:
    jobs:
      - test-windows-msys2
